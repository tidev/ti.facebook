// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FBSDKLoginKit
import FBSDKCoreKit
@_exported import FBSDKLoginKit
import Swift
import UIKit
@available(tvOS, unavailable)
extension FBLoginButton {
  convenience public init(frame: CoreGraphics.CGRect = .zero, permissions: [FBSDKCoreKit.Permission] = [.publicProfile])
}
extension LoginConfiguration {
  convenience public init?(permissions: Swift.Set<FBSDKCoreKit.Permission> = [], tracking: FBSDKLoginKit.LoginTracking = .enabled, nonce: Swift.String = UUID().uuidString, messengerPageId: Swift.String? = nil, authType: FBSDKLoginKit.LoginAuthType? = .rerequest)
}
@available(tvOS, unavailable)
public typealias LoginResultBlock = (FBSDKLoginKit.LoginResult) -> Swift.Void
@available(tvOS, unavailable)
public enum LoginResult {
  case success(granted: Swift.Set<FBSDKCoreKit.Permission>, declined: Swift.Set<FBSDKCoreKit.Permission>, token: FBSDKCoreKit.AccessToken?)
  case cancelled
  case failed(Swift.Error)
}
@available(tvOS, unavailable)
extension LoginManager {
  convenience public init(defaultAudience: FBSDKLoginKit.DefaultAudience = .friends)
  public func logIn(permissions: [FBSDKCoreKit.Permission] = [.publicProfile], viewController: UIKit.UIViewController? = nil, completion: FBSDKLoginKit.LoginResultBlock? = nil)
  public func logIn(viewController: UIKit.UIViewController? = nil, configuration: FBSDKLoginKit.LoginConfiguration, completion: @escaping FBSDKLoginKit.LoginResultBlock)
  public func logIn(configuration: FBSDKLoginKit.LoginConfiguration, completion: @escaping FBSDKLoginKit.LoginResultBlock)
}
